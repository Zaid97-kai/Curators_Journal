@using API.Models.Entities.Domains

<div class="container bg-secondary bg-opacity-50 my-4" style="min-height: 600px; max-height: 800px">
    <div class="container-fluid">
        <GridRow Gutter="16" Align="middle" Style="padding-top: 10px; padding-bottom: 10px">
            <GridCol Span="2">
                @if (true)
                {
                    <img class="img-fluid rounded" src="../img/no-img.jpg" alt="">
                }
            </GridCol>
            <GridCol Span="21">
                @if (Group == null || CurrentUser == null)
                {
                    <Skeleton Active=true></Skeleton>
                }
                else
                {
                    <h5 class="text-white" style="margin-bottom: 0px; padding-left: 0px">@Group.Name</h5>
                    <p class="text-white" style="margin-bottom: 7px; padding-left: 0px">@CurrentUser.Name</p>
                }
            </GridCol>
        </GridRow>
        <GridRow Gutter="16" Align="bottom" Justify="start">
            <GridCol Span="12">
                <h5 class="text-white" style="margin-top: 10px">Участники группы</h5>
            </GridCol>
            <GridCol Span="12">
                <h5 class="text-white">Список мероприятий</h5>
            </GridCol>
        </GridRow>
        <GridRow Gutter="16" Align="middle" Justify="start">
            <GridCol Span="12">
                <div class="container-fluid bg-white rounded-3 overflow-auto" style="max-height: 400px">
                    @if (Group == null || CurrentUser == null)
                    {
                        <Skeleton Active=true></Skeleton>
                    }
                    else
                    {
                        @foreach (var item in Group.Users)
                        {
                            <IndividualStudent Student="item"></IndividualStudent>
                        }
                    }
                </div>
            </GridCol>
            <GridCol Span="12">
                <div class="container-fluid bg-white rounded-3 overflow-auto" style="max-height: 400px">
                    @if (Group == null || CurrentUser == null)
                    {
                        <Skeleton Active=true></Skeleton>
                    }
                    else
                    {
                        if(_events != null)
                        {
                            @foreach (var item in _events)
                            {
                                <IndividualEvent Event="item"></IndividualEvent>
                            }
                        }
                        else
                        {
                            <p>Pusto</p>
                        }
                        
                    }
                </div>
            </GridCol>
        </GridRow>
        <GridRow Gutter="16" Style="margin-top: 10px" Align="middle" Justify="center">
            <GridCol Span="12" Style="text-align: center">
                <button class="btn btn-secondary" style="margin-right: 5px">Экспорт</button>
                @if (_role != null)
                {
                    @if (CurrentUser.RoleId == _role.Id)
                    {
                        <button class="btn btn-secondary" style="margin-right: 5px; margin-left: 5px">Импорт</button>
                        <button class="btn btn-secondary" style="margin-right: 2px; margin-left: 2px" @onclick="@ShowModalAddStudentWindow">Добавить</button>
                    }
                }
            </GridCol>
            <GridCol Span="12" Style="text-align: center">
                <button class="btn btn-secondary" style="margin-right: 5px">Экспорт</button>
                @if (_role != null)
                {
                    @if (CurrentUser.RoleId == _role.Id)
                    {
                        <button class="btn btn-secondary" style="margin-right: 5px; margin-left: 5px">Импорт</button>
                        <button class="btn btn-secondary" style="margin-right: 2px; margin-left: 2px">Добавить</button>
                    }
                }
            </GridCol>
        </GridRow>
    </div>
</div>

@if (IsVisibleAddStudentModalWindow)
{
    <AddStudentModalWindow Visible="IsVisibleAddStudentModalWindow" ChangeVisible="ModalAddStudentWindowParam"></AddStudentModalWindow>
}

@code {
    [Parameter]
    public Group? Group { get; set; }

    [Parameter]
    public User? CurrentUser { get; set; }

    [Inject]
    public RoleService? RoleService { get; set; }

    [Inject]
    public GroupService? GroupService { get; set; }

    [Inject]
    public UserService? UserService { get; set; }

    [Inject]
    public GroupEventService? GroupEventService { get; set; }

    [Inject]
    public EventService? EventService { get; set; }

    private bool IsVisibleAddStudentModalWindow { get; set; }

    private List<Group>? _groups = new();

    private List<Role>? _roles = new();

    private List<User>? _users = new();

    private List<Event>? _events = new();

    private List<GroupEvent>? _groupEvents = new();

    private Role _role;

    public void ShowModalAddStudentWindow()
    {
        IsVisibleAddStudentModalWindow = !IsVisibleAddStudentModalWindow;
    }

    public void ModalAddStudentWindowParam(bool value)
    {
        IsVisibleAddStudentModalWindow = value;
    }



    protected override async Task OnInitializedAsync()
    {

        var group = await GroupService?.PostAsync()!;
        _groups = JsonConvert.DeserializeObject<List<Group>>(group.Result.Items?.ToString() ?? string.Empty);

        var users = await UserService?.PostAsync()!;
        _users = JsonConvert.DeserializeObject<List<User>>(users.Result.Items?.ToString() ?? string.Empty);

        var roles = await RoleService?.PostAsync()!;
        _roles = JsonConvert.DeserializeObject<List<Role>>(roles.Result.Items?.ToString() ?? string.Empty);

        var events = await EventService?.PostAsync()!;
        _events = JsonConvert.DeserializeObject<List<Event>>(events.Result.Items?.ToString() ?? string.Empty);

        var groupEvents = await GroupEventService?.PostAsync()!;
        _groupEvents = JsonConvert.DeserializeObject<List<GroupEvent>>(groupEvents.Result.Items?.ToString() ?? string.Empty);

        _role = _roles.FirstOrDefault(i => i.Name == "Curator");

        Group = _groups.FirstOrDefault(i => i.Id == 2);
        CurrentUser = _users.FirstOrDefault(i => i.GroupId == 2);

        _groupEvents = _groupEvents.Where(i => i.GroupId == Group.Id).ToList();

        var displayEvents = new List<Event>();
        foreach(var groupEvent in _groupEvents)
        {
            foreach(var @event in _events)
            {
                if (groupEvent.Id == @event.Id)
                {
                    displayEvents.Add(@event);
                }
            }
        }

        if(displayEvents != null)
        {
            _events = displayEvents;
        }

        if (Group.Users == null)
        {
            Group.Users = new();
        }

        if (Group.Users.Count == 0)
        {
            foreach (var item in _users)
            {
                Group.Users.Add(item);
            }
        }


    }
}
