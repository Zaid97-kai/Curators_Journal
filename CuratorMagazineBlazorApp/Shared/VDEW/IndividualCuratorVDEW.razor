@using WebClient.Data.Services
@using API.Models.Entities.Domains

<div class="row mt-3 group rounded">
    <div class="col-md-1">
        <img class="rounded img-fluid mt-1" src="../img/no-img.jpg" alt="">
    </div>
    <div class="col-md-8 mt-1">
        <h5><a class="text-dark" style="text-decoration: none;">@Curator?.Name</a></h5>
        <p class="text-dark">@Curator?.Email</p>
        @*todo: Пометка придумать как достать куратора*@
    </div>
    <div class="col-md-3 text-end">
        <button type="button" class="btn btn-secondary me-2" @onclick="ShowModalChangeCuratorWindow">Изменить</button>
        <button type="button" class="btn btn-secondary" @onclick="ShowDeleteModalWindow">Удалить</button>
    </div>
</div>
@if (IsVisibleModalChangeCuratorWindow)
{
    <ChangeCuratorModalWindow Visible="IsVisibleModalChangeCuratorWindow" Curator="@Curator" ChangeVisible="ShowModalChangeCuratorWindowParam"></ChangeCuratorModalWindow>
}
@if (IsVisibleDeleteModalWindow)
{
    <DeleteModalWindow Visible="IsVisibleDeleteModalWindow" Object="Curator" ChangeVisible="DeleteModalWindowParam"></DeleteModalWindow>
}

@code {
    [Parameter]
    public User? Curator { get; set; }

    [Inject]
    public GroupService? UserService { get; set; }

    private bool IsVisibleModalChangeCuratorWindow { get; set; }

    private bool IsVisibleDeleteModalWindow { get; set; }

    public void ShowModalChangeCuratorWindow()
    {
        IsVisibleModalChangeCuratorWindow = !IsVisibleModalChangeCuratorWindow;
    }
    public void ShowModalChangeCuratorWindowParam(bool value)
    {
        IsVisibleModalChangeCuratorWindow = value;
    }

    public void ShowDeleteModalWindow()
    {
        IsVisibleDeleteModalWindow = !IsVisibleDeleteModalWindow;
    }

    public void DeleteModalWindowParam(bool value)
    {
        IsVisibleDeleteModalWindow = value;
    }
}
